const router = require('express').Router();
const User = require('../Model/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const {registerValidation, loginValidation} = require('../Routes/validation');

router.post('/register',  async (req, res) => {

    //Data validation
    const {error} = registerValidation(req.body);
    if (error)
        return res.status(400).send(error.details[0].message);

    //Check if the user is already in the DB
    const userExist = await User.findOne({email: req.body.email});
    if (userExist)
        return res.status(400).send("Email already exists!");

    //Password hash
    const salt = await bcrypt.genSalt(10);
    const hash = await bcrypt.hash(req.body.password, salt);

    const user = new User({
       email: req.body.email,
       name: req.body.name,
       password: hash
    });
    try{
        const savedUser = await user.save();
        res.send("User created successfully!");
    }catch(error){
        res.status(400).send(error);
    }
});

router.post('/login', async (req, res) => {

    //Data validation
    const {error} = loginValidation(req.body);
    if (error)
        return res.status(400).send(error.details[0].message);

    //Check if the user exists
    const userExist = await User.findOne({email: req.body.email});
    if (!userExist)
        return res.status(400).send("The email or password is wrong!");
    //Password validation
    const validPassword = await bcrypt.compare(req.body.password, userExist.password);
    if (!validPassword)
        return res.status(400).send("The email or password is wrong!");

    //Create and assign token
    const token = jwt.sign({_id: userExist._id}, process.env.TOKEN_SECRET);
    res.header('auth-token', token).send(token);


});

module.exports = router;